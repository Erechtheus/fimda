<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>de.dfki.lt.fimda</groupId>
    <artifactId>fimda</artifactId>
    <version>0.2.2-SNAPSHOT</version>
    <packaging>jar</packaging>

    <inceptionYear>2018</inceptionYear>
    <organization>
        <name>Deutsche Forschungszentrum für Künstliche Intelligenz (DFKI)</name>
    </organization>

    <name>FIMDA: Finding Mutations in the Digital Age</name>
    <description>
        UIMA wrapper for SETH with docker container
    </description>
    <url>https://github.com/Erechtheus/fimda</url>

    <licenses>
        <license>
            <name>The Apache License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <comments>
                FIMDA (like SETH) is published under Apache Licence Version 2.0. The original MutationFinder
                used by SETH has been published by the University of Colorado under MIT License.
            </comments>
        </license>
    </licenses>

    <issueManagement>
        <url>https://github.com/Erechtheus/fimda/issues</url>
        <system>GitHub</system>
    </issueManagement>

    <properties>
        <!-- If releasing to Docker Hub is intended, docker.image.prefix has to match the username
             defined for server docker.io in settings.xml -->
        <docker.image.prefix>erechtheus</docker.image.prefix>
        <!-- release on github (and docker hub) -->
        <release.github.description>OMTD-compliance: removed entrypoint from Dockerfile and take --input and --output as directories (process all files in input and save to output/input_base_name)</release.github.description>
        <release.tag>0.2.2</release.tag>
        <!-- set license for license-maven-plugin (file headers, third-party.txt, etc.) -->
        <license.licenseName>apache_v2</license.licenseName>
        <!-- avoid warnings regarding dependencies for site generation -->
        <dependency.locations.enabled>false</dependency.locations.enabled>
        <!-- set encoding -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <developers>
        <developer>
            <name>Philippe Thomas</name>
            <email />
            <organization>Deutsches Forschungszentrum für Künstliche Intelligenz (DFKI)</organization>
            <organizationUrl>https://www.dfki.de/lt</organizationUrl>
        </developer>

        <developer>
            <name>Arne Binder</name>
            <email />
            <organization>Deutsches Forschungszentrum für Künstliche Intelligenz (DFKI)</organization>
            <organizationUrl>https://www.dfki.de/lt</organizationUrl>
        </developer>
    </developers>

    <scm>
        <url>git@github.com:Erechtheus/fimda.git</url> <!-- https://github.com/Erechtheus/fimda -->
        <connection>scm:git:git@github.com:Erechtheus/fimda.git</connection>
        <developerConnection>scm:git:git@github.com:Erechtheus/fimda.git</developerConnection>
      <tag>HEAD</tag>
  </scm>

    <dependencies>
        <!-- SETH -->
        <dependency>
            <groupId>com.github.rockt</groupId>
            <artifactId>SETH</artifactId>
            <version>1.3.1</version>
        </dependency>

        <!-- UIMA -->
        <dependency>
            <groupId>org.apache.uima</groupId>
            <artifactId>uimaj-core</artifactId>
            <version>3.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.uima</groupId>
            <artifactId>uimaj-json</artifactId>
            <version>3.0.0</version>
        </dependency>

        <!-- argument parser -->
        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
            <version>1.4</version>
        </dependency>


        <!-- testing -->
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.9.1</version>
            <scope>test</scope>
        </dependency>

        <!-- logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.25</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-jdk14</artifactId>
            <version>1.7.25</version>
        </dependency>


    </dependencies>

    <build>
        <resources>
            <!-- add resources into classes folder to enable loading via classpath protocol -->
            <resource>
                <targetPath>${basedir}/target/classes/resources</targetPath>
                <directory>${basedir}/src/main/resources</directory>
            </resource>
        </resources>

        <plugins>
            <!--  creates a jar archive of the source files of the current project-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- execute the unit tests of an application-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.16</version>
            </plugin>

            <!-- run integration tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.16</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Used to compile the sources of your project. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <showDeprecation>true</showDeprecation>
                    <showWarnings>true</showWarnings>
                    <!--<executable>>${JAVA_HOME}/bin/javac</executable>-->
                    <fork>true</fork>
                </configuration>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- create "fat" jar (includes dependencies) with entry class -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <configuration>
                    <transformers>
                        <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                            <mainClass>de.dfki.lt.fimda.fimda.FIMDA</mainClass>
                        </transformer>
                    </transformers>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--  contains various small independent goals to assist with the Maven build lifecycle-->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${basedir}/src/main/types</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--  generate javadocs for the specified project -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.10.3</version>
                <configuration>
                    <doctitle>FIMDA documentation</doctitle> <!-- Used by javadoc:javadoc goal -->
                    <windowtitle>FIMDA documentation</windowtitle> <!-- Used by javadoc:javadoc goal -->
                    <tags>
                        <tag>
                            <!-- JCasGen (executed by jcasgen-maven-plugin) adds this tag for elements generated
                                 from description xml files -->
                            <name>generated</name>
                            <!-- generated tag for all places -->
                            <placement>a</placement>
                            <head>Generated by JCasGen.</head>
                        </tag>
                        <tag>
                            <name>ordered</name>
                            <placement>X</placement>
                        </tag>
                    </tags>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>2.9</version>
            </plugin>

            <!-- release on github. Make sure that your local maven settings.xml file
                 (default location: ~/.m2/settings.xml) exists and contains github credentials like:
                    <servers>
                        <server>
                            <id>github</id>
                            <username>GITHUB_USERNAME</username>
                            <password>GITHUB_PASSWORD</password>
                        </server>
                    </servers>
                 or
                    <servers>
                        <server>
                            <id>github</id>
                            <privateKey>DEPLOY_KEY</privateKey>
                        </server>
                    </servers>
	         -->

            <plugin>
                <groupId>de.jutzig</groupId>
                <artifactId>github-release-plugin</artifactId>
                <version>1.2.0</version>
                <executions>
                    <execution>
                        <id>github-upload</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>release</goal>
                        </goals>
                        <inherited>false</inherited>
                        <configuration>
                            <releaseName>${project.artifactId}-${release.tag}</releaseName>
                            <tag>${release.tag}</tag>
                            <description>${release.github.description}</description>
                            <!--<artifact>${project.build.directory}/${project.groupId}.${project.artifactId}-${project.version}.jar</artifact>-->
                            <fileSets>
                                <fileSet>
                                    <directory>${project.build.directory}</directory>
                                    <includes>
                                        <include>${project.build.finalName}-sources.jar</include>
                                        <include>${project.build.finalName}-docker-info.jar</include>
                                    </includes>
                                </fileSet>
                            </fileSets>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>2.5.3</version>
                <configuration>
                    <!-- tangle the tag name with the name used by github-release plugin -->
                    <tagNameFormat>${release.tag}</tagNameFormat>
                </configuration>
            </plugin>

            <!-- generate UIMA CAS type classes from description file -->
            <plugin>
                <groupId>org.apache.uima</groupId>
                <artifactId>jcasgen-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <goals><goal>generate</goal></goals>  <!-- this is the only goal -->
                        <!-- runs in phase process-resources by default -->
                        <configuration>
                            <!-- REQUIRED -->
                            <typeSystemIncludes>
                                <!-- one or more ant-like file patterns
                                     identifying top level descriptors -->
                                <typeSystemInclude>src/main/resources/desc/SethTypeSystem.xml</typeSystemInclude>
                            </typeSystemIncludes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


            <!-- create docker image and push to hub.docker.com
                 Make sure that your local maven settings.xml file
                 (default location: ~/.m2/settings.xml) exists and contains docker hub credentials like:

                 <servers>
            	    <server>
                        <id>docker.io</id>
                        <username>DOCKER_HUB_ACCOUNT_NAME</username>
                        <password>DOCKER_HUB_ACCOUNT_PASSWORD</password>
                    </server>
                </servers>
            -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>1.4.0</version>
                <executions>
                    <execution>
                        <id>default</id>
                        <goals>
                            <goal>build</goal>
                            <goal>push</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>tag-latest</id>
                        <goals>
                            <goal>tag</goal>
                            <goal>push</goal>
                        </goals>
                        <configuration>
                            <tag>latest</tag>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <repository>${docker.image.prefix}/${project.artifactId}</repository>
                    <useMavenSettingsForAuth>true</useMavenSettingsForAuth>
                    <tag>${release.tag}</tag>
                    <buildArgs>
                        <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
                    </buildArgs>
                </configuration>
            </plugin>


            <!-- apache 2 license compliance: add file headers -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>license-maven-plugin</artifactId>
                <version>1.14</version>
                <executions>
                    <execution>
                        <id>first</id>
                        <goals>
                            <goal>update-file-header</goal>
                        </goals>
                        <phase>process-sources</phase>
                        <configuration>
                            <verbose>false</verbose>
                            <addSvnKeyWords>false</addSvnKeyWords>
                            <excludes>
                                <!-- exclude test/resources/result.json -->
                                <!--<exclude>**/result.json</exclude>-->
                                <!--<exclude>**/result.xml</exclude>-->
                                <exclude>**/test/resources/**</exclude>
                            </excludes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>2.8.2</version>
                <configuration>
                    <altDeploymentRepository>internal.repo::default::file://${project.build.directory}/mvn-repo</altDeploymentRepository>
                </configuration>
            </plugin>

        </plugins>
    </build>


    <pluginRepositories>

        <pluginRepository>
            <id>central</id>
            <name>Maven Plugin Repository</name>
            <url>http://repo1.maven.org/maven2</url>
            <layout>default</layout>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <releases>
                <updatePolicy>never</updatePolicy>
            </releases>
        </pluginRepository>

    </pluginRepositories>

    <repositories>

        <repository>
            <id>central</id>
            <name>Maven Repository Switchboard</name>
            <layout>default</layout>
            <url>http://repo1.maven.org/maven2</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>

        <!-- for SETH dependency -->
        <repository>
            <id>jitpack.io</id>
            <url>https://jitpack.io</url>
        </repository>
    </repositories>

    <distributionManagement>
        <repository>
            <id>internal.repo</id>
            <name>Temporary Staging Repository</name>
            <url>file://${project.build.directory}/mvn-repo</url>
        </repository>
    </distributionManagement>

</project>